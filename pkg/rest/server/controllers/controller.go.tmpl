package controllers

import (
	"github.com/gin-gonic/gin"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/services"
	log "github.com/sirupsen/logrus"
	"net/http"
)

var {{.ResourceNameSingular}}Service = services.{{.ResourceName}}Service{}

func Create{{.ResourceName}}(context *gin.Context) {
	// validate input
	var input models.{{.ResourceName}}
	if err := context.ShouldBindJSON(&input); err != nil {
		log.Error(err)
		context.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// trigger {{.ResourceNameSingular}} creation
	if err := {{.ResourceNameSingular}}Service.Create{{.ResourceName}}(input); err != nil {
		log.Error(err)
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	context.JSON(http.StatusOK, gin.H{"message": "{{.ResourceName}} created successfully"})
}

func Update{{.ResourceName}}(context *gin.Context) {
	// validate input
	var input models.{{.ResourceName}}
	if err := context.ShouldBindJSON(&input); err != nil {
		log.Error(err)
		context.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	id := context.Param("id")

	// trigger {{.ResourceNameSingular}} updation
	if err := {{.ResourceNameSingular}}Service.Update{{.ResourceName}}(id, input); err != nil {
		log.Error(err)
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	context.JSON(http.StatusOK, gin.H{"message": "{{.ResourceName}} updated successfully"})
}

func Get{{.ResourceName}}(context *gin.Context) {
	id := context.Param("id")

	// trigger {{.ResourceNameSingular}} fetching
	{{.ResourceNameSingular}}, err := {{.ResourceNameSingular}}Service.Get{{.ResourceName}}(id)
	if err != nil {
		log.Error(err)
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	context.JSON(http.StatusOK, {{.ResourceNameSingular}})
}

func Delete{{.ResourceName}}(context *gin.Context) {
	id := context.Param("id")

	// trigger {{.ResourceNameSingular}} deletion
	if err := {{.ResourceNameSingular}}Service.Delete{{.ResourceName}}(id); err != nil {
		log.Error(err)
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	context.JSON(http.StatusOK, gin.H{
		"message": "{{.ResourceName}} deleted successfully",
	})
}

func List{{.ResourceName}}s(context *gin.Context) {
	// trigger all {{.ResourceNamePlural}} fetching
	{{.ResourceNamePlural}}, err := {{.ResourceNameSingular}}Service.List{{.ResourceName}}s()
	if err != nil {
		log.Error(err)
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	context.JSON(http.StatusOK, {{.ResourceNamePlural}})
}

func Patch{{.ResourceName}}(context *gin.Context) {
	context.JSON(http.StatusOK, gin.H{
		"message": "PATCH",
	})
}
func Options{{.ResourceName}}(context *gin.Context) {
	context.JSON(http.StatusOK, gin.H{
		"message": "OPTIONS",
	})
}

func Head{{.ResourceName}}(context *gin.Context) {
	context.JSON(http.StatusOK, gin.H{
		"message": "HEAD",
	})
}
