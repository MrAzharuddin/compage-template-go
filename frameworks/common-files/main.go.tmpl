package main

import (
{{if and .IsRestServer .IsGrpcServer}}
        "net"
        "os"
        pb "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/gen/api/v1"
        grpccontrollers "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/grpc/server/controllers"
        "google.golang.org/grpc"
        "google.golang.org/grpc/reflection"
	    "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/config"
        "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
        "go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc"
    	sdktrace "go.opentelemetry.io/otel/sdk/trace"
        "context"
        restcontrollers "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/server/controllers"
        "github.com/gin-gonic/gin"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "github.com/sinhashubham95/go-actuator"
        log "github.com/sirupsen/logrus"
    {{else if .IsGrpcServer }}
        "net"
        "os"
        log "github.com/sirupsen/logrus"
        "context"
	    "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/config"
        "google.golang.org/grpc/reflection"

        pb "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/gen/api/v1"
        grpccontrollers "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/grpc/server/controllers"
    	sdktrace "go.opentelemetry.io/otel/sdk/trace"
        "go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc"
        "google.golang.org/grpc"

    {{else if .IsRestServer }}
        "context"
    	sdktrace "go.opentelemetry.io/otel/sdk/trace"
        "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/config"
        restcontrollers "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/server/controllers"
        "github.com/gin-gonic/gin"
        "github.com/prometheus/client_golang/prometheus/promhttp"
        "github.com/sinhashubham95/go-actuator"
        "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
        log "github.com/sirupsen/logrus"
        "os"
{{end}}

{{if .HasRestClients}}
    "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/client"
{{end}}
{{if .HasGrpcClients}}
	"{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/grpc/client"
{{end}}
)


{{if .IsGrpcServer }}
var (
	host = "localhost"
	port = "{{.GrpcServerPort}}"
)
{{end}}

var (
    serviceName  = os.Getenv("SERVICE_NAME")
    collectorURL = os.Getenv("OTEL_EXPORTER_OTLP_ENDPOINT")
    insecure     = os.Getenv("INSECURE_MODE")
)

func main() {
 {{if .IsGrpcServer }}
    // grpc server configuration
    // Initialize the exporter
    var grpcTraceProvider *sdktrace.TracerProvider
	if len(serviceName) > 0 && len(collectorURL) > 0 {
		// add opentel
		grpcTraceProvider = config.InitGrpcTracer(serviceName, collectorURL, insecure)
	}
    defer func() {
        if grpcTraceProvider != nil {
            if err := grpcTraceProvider.Shutdown(context.Background()); err != nil {
                log.Printf("Error shutting down tracer provider: %v", err)
            }
        }
    }()

	// Set up the TCP listener
	addr := net.JoinHostPort(host, port)
	lis, err := net.Listen("tcp", addr)
	if err != nil {
		log.Errorf("error while starting TCP listener: %v", err)
		os.Exit(1)
	}

    log.Printf("TCP listener started at port: %s", port)

	// Create a new gRPC server
	grpcServer := grpc.NewServer(
        grpc.UnaryInterceptor(otelgrpc.UnaryServerInterceptor()),
        grpc.StreamInterceptor(otelgrpc.StreamServerInterceptor()),
	)

 {{range $i, $v := .GrpcResources}}
	// Create the {{$v.CapsResourceNameSingular}} server
	{{$v.SmallResourceNameSingular}}Server, err := grpccontrollers.New{{$v.CapsResourceNameSingular}}Server()
    if err != nil {
        log.Errorf("error while creating {{$v.SmallResourceNameSingular}}Server: %v", err)
        os.Exit(1)
    }
	// Register the {{$v.CapsResourceNameSingular}} server with the gRPC server
	pb.Register{{$v.CapsResourceNameSingular}}ServiceServer(grpcServer, {{$v.SmallResourceNameSingular}}Server)
  {{end}}
	// Enable reflection for the gRPC server
	reflection.Register(grpcServer)
 {{end}}
 {{if and .IsRestServer .IsGrpcServer}}
    go func() {
        // Start serving gRPC requests
        if err = grpcServer.Serve(lis); err != nil {
            log.Errorf("error serving gRPC: %v", err)
            os.Exit(1)
        }
    }()
 {{else if .IsGrpcServer}}
    // Start serving gRPC requests
    if err := grpcServer.Serve(lis); err != nil {
        log.Errorf("error serving gRPC: %v", err)
        os.Exit(1)
    }
 {{end}}

 {{if .IsRestServer }}
    // rest server configuration
	router := gin.Default()
    var restTraceProvider *sdktrace.TracerProvider
	if len(serviceName) > 0 && len(collectorURL) > 0 {
		// add opentel
		restTraceProvider = config.InitRestTracer(serviceName, collectorURL, insecure)
		router.Use(otelgin.Middleware(serviceName))
	}
    defer func() {
        if restTraceProvider != nil {
            if err := restTraceProvider.Shutdown(context.Background()); err != nil {
                log.Printf("Error shutting down tracer provider: %v", err)
            }
        }
    }()
    // add actuator
	addActuator(router)
	// add prometheus
	addPrometheus(router)

    {{range $i, $v := .RestResources}}
        {{$v.SmallResourceNameSingular}}Controller, err := restcontrollers.New{{$v.CapsResourceNameSingular}}Controller()
        if err != nil {
            log.Errorf("error occurred: %v", err)
            os.Exit(1)
        }
    {{end}}
    v1 := router.Group("/v1")
    {
        {{range $i, $v := .RestResources}}
            {{ if $v.IsRESTCreateAllowed }}
            v1.POST("/{{$v.SmallResourceNamePlural}}", {{$v.SmallResourceNameSingular}}Controller.Create{{$v.CapsResourceNameSingular}})
            {{ end }}
            {{ if $v.IsRESTListAllowed }}
            v1.GET("/{{$v.SmallResourceNamePlural}}", {{$v.SmallResourceNameSingular}}Controller.List{{$v.CapsResourceNamePlural}})
            {{ end }}
            {{ if $v.IsRESTGetAllowed }}
            v1.GET("/{{$v.SmallResourceNamePlural}}/:id", {{$v.SmallResourceNameSingular}}Controller.Fetch{{$v.CapsResourceNameSingular}})
            {{ end }}
            {{ if $v.IsRESTPutAllowed }}
            v1.PUT("/{{$v.SmallResourceNamePlural}}/:id", {{$v.SmallResourceNameSingular}}Controller.Update{{$v.CapsResourceNameSingular}})
            {{ end }}
            {{ if $v.IsRESTDeleteAllowed }}
            v1.DELETE("/{{$v.SmallResourceNamePlural}}/:id", {{$v.SmallResourceNameSingular}}Controller.Delete{{$v.CapsResourceNameSingular}})
            {{ end }}
            {{ if $v.IsRESTPatchAllowed }}
            v1.PATCH("/{{$v.SmallResourceNamePlural}}/:id", {{$v.SmallResourceNameSingular}}Controller.Patch{{$v.CapsResourceNameSingular}})
            {{ end }}
            {{ if $v.IsRESTHeadAllowed }}
            v1.HEAD("/{{$v.SmallResourceNamePlural}}", {{$v.SmallResourceNameSingular}}Controller.Head{{$v.CapsResourceNameSingular}})
            {{ end }}
            {{ if $v.IsRESTOptionsAllowed }}
            v1.OPTIONS("/{{$v.SmallResourceNamePlural}}", {{$v.SmallResourceNameSingular}}Controller.Options{{$v.CapsResourceNameSingular}})
            {{ end }}
        {{end}}
    }

	Port := ":{{.RestServerPort}}"
	log.Println("Server started")
	if err = router.Run(Port); err != nil {
        log.Errorf("error occurred: %v", err)
		os.Exit(1)
	}
 {{end}}
 {{if .HasRestClients}}
    // this will not be called as the control won't reach here.
    // call external services here if the HasRestClients value is true
    // (that means this repo is a client to external service(s)
    var err0 error
    {{range $i, $v := .RestClients}}
        b{{$v.SourceNodeID}}, err0 := client.Execute{{$v.SourceNodeID}}()
        if err0!=nil {
            log.Printf("error occurred: %v", err0)
            return
        }
        log.Printf("response received: %s", string(b{{$v.SourceNodeID}}))
    {{end}}
 {{end}}
 {{if .HasGrpcClients }}
   	 // call external service here if the HasGrpcClients value is true
   	 // (that means this repo is a client to external service)
     client.Execute()
 {{end}}
}

{{if .IsRestServer }}

func prometheusHandler() gin.HandlerFunc {
	h := promhttp.Handler()

	return func(c *gin.Context) {
		h.ServeHTTP(c.Writer, c.Request)
	}
}

func addPrometheus(router *gin.Engine) {
	router.GET("/metrics", prometheusHandler())
}

func addActuator(router *gin.Engine) {
	actuatorHandler := actuator.GetActuatorHandler(&actuator.Config{Endpoints: []int{
		actuator.Env,
		actuator.Info,
		actuator.Metrics,
		actuator.Ping,
		// actuator.Shutdown,
		actuator.ThreadDump,
	},
		Env:     "dev",
		Name:    "{{.NodeName}}",
		Port:    {{.RestServerPort}},
		Version: "0.0.1",
	})
	ginActuatorHandler := func(ctx *gin.Context) {
		actuatorHandler(ctx.Writer, ctx.Request)
	}
	router.GET("/actuator/*endpoint", ginActuatorHandler)
}

func init() {
	// Log as JSON instead of the default ASCII formatter.
	// log.SetFormatter(&log.JSONFormatter{})
	log.SetFormatter(&log.TextFormatter{
		DisableColors: false,
		FullTimestamp: true,
	})
	// Output to stdout instead of the default stderr
	// Can be any io.Writer, see below for File example
	log.SetOutput(os.Stdout)
	// Only log the warning severity or above.
	log.SetLevel(log.InfoLevel)
}

{{end}}