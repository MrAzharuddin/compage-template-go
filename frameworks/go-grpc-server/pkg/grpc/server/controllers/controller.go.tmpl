package controllers

import (
	"context"

	pb "github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/gen/api/v1"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/grpc/server/services"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/grpc/server/models"
    "strconv"
	"github.com/google/uuid"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

var {{.SmallResourceNameSingular}}Service = services.{{.CapsResourceNameSingular}}Service{}

type {{.CapsResourceNameSingular}}Server struct {
	pb.Unimplemented{{.CapsResourceNameSingular}}ServiceServer
}

func New{{.CapsResourceNameSingular}}Server() *{{.CapsResourceNameSingular}}Server {
	return &{{.CapsResourceNameSingular}}Server{}
}

func (s *{{.CapsResourceNameSingular}}Server) Ping(ctx context.Context, req *pb.Request) (*pb.Response, error) {
	return &pb.Response{
		Message: "Server is healthy and working!",
	}, nil
}

func (s *{{.CapsResourceNameSingular}}Server) Create{{.CapsResourceNameSingular}}(ctx context.Context, req *pb.Create{{.CapsResourceNameSingular}}Request) (*pb.Create{{.CapsResourceNameSingular}}Response, error) {
	id := uuid.New().String()
	request := req.Get{{.CapsResourceNameSingular}}()

	{{.SmallResourceNameSingular}} := models.{{.CapsResourceNameSingular}}{
		Id: id,
		{{ range .Fields }}{{ if eq .Name "Id" }}{{ else }}{{ .Name }}: request.Get{{ .Name }}(),{{ end }}
		{{ end }}
	}

	if err := {{.SmallResourceNameSingular}}Service.Create{{.CapsResourceNameSingular}}({{.SmallResourceNameSingular}}); err != nil {
		return nil, err
	}

	return &pb.Create{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Created Successfully!",
	}, nil
}


func (s *{{.CapsResourceNameSingular}}Server) Get{{.CapsResourceNameSingular}}(ctx context.Context, req *pb.Get{{.CapsResourceNameSingular}}Request) (*pb.Get{{.CapsResourceNameSingular}}Response, error) {
    id, err := strconv.ParseInt(req.GetId(), 10, 64)
    if err != nil {
        log.Error(err)
        return nil, err
    }

	{{.SmallResourceNameSingular}}, err := {{.SmallResourceNameSingular}}Service.Get{{.CapsResourceNameSingular}}(id)

	if err != nil {
		return nil, err
	}

	{{.SmallResourceNameSingular}}Response := &pb.{{.CapsResourceNameSingular}}{
		Id: {{.SmallResourceNameSingular}}.Id,
		{{ range .Fields }}{{ if eq .Name "Id" }}{{ else }}{{ .Name }}: {{$.SmallResourceNameSingular}}.{{.Name}},{{ end }}
		{{ end }}
	}

	return &pb.Get{{.CapsResourceNameSingular}}Response{
		{{.CapsResourceNameSingular}}: {{.SmallResourceNameSingular}}Response,
	}, nil
}

func (s *{{.CapsResourceNameSingular}}Server) List{{.CapsResourceNamePlural}}(ctx context.Context, req *pb.List{{.CapsResourceNamePlural}}Request) (*pb.List{{.CapsResourceNamePlural}}Response, error) {
	{{.SmallResourceNamePlural}}, err := {{.SmallResourceNameSingular}}Service.List{{.CapsResourceNamePlural}}()

	if err != nil {
		return nil, err
	}

	var {{.SmallResourceNameSingular}}List []*pb.{{.CapsResourceNameSingular}}
	for _, {{.SmallResourceNameSingular}} := range {{.SmallResourceNamePlural}} {
		{{.SmallResourceNameSingular}}Response := &pb.{{.CapsResourceNameSingular}}{
			Id: {{.SmallResourceNameSingular}}.Id,
			{{ range .Fields }}{{ if eq .Name "Id" }}{{ else }}{{.Name}}: {{$.SmallResourceNameSingular}}.{{.Name}},{{ end }}
			{{ end }}
		}
		{{.SmallResourceNameSingular}}List = append({{.SmallResourceNameSingular}}List, {{.SmallResourceNameSingular}}Response)
	}

	return &pb.List{{.CapsResourceNamePlural}}Response{
		{{.CapsResourceNameSingular}}: {{.SmallResourceNameSingular}}List,
	}, nil
}

func (s *{{.CapsResourceNameSingular}}Server) Update{{.CapsResourceNameSingular}}(ctx context.Context, req *pb.Update{{.CapsResourceNameSingular}}Request) (*pb.Update{{.CapsResourceNameSingular}}Response, error) {
    id, err := strconv.ParseInt(req.GetId(), 10, 64)
    if err != nil {
        log.Error(err)
        return nil, err
    }

	{{.SmallResourceNameSingular}} := req.Get{{.CapsResourceNameSingular}}()

	{{.SmallResourceNameSingular}}Response := models.{{.CapsResourceNameSingular}}{
		Id: id,
		{{ range .Fields }}{{ if eq .Name "Id" }}{{ else }}{{ .Name }}: {{$.SmallResourceNameSingular}}.Get{{.Name}},{{ end }}
		{{ end }}
	}
	err := {{.SmallResourceNameSingular}}Service.Update{{.CapsResourceNameSingular}}(id, {{.SmallResourceNameSingular}}Response)

	if err != nil {
		return nil, err
	}

	return &pb.Update{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Updated Successfully!",
	}, nil
}

func (s *{{.CapsResourceNameSingular}}Server) Delete{{.CapsResourceNameSingular}}(ctx context.Context, req *pb.Delete{{.CapsResourceNameSingular}}Request) (*pb.Delete{{.CapsResourceNameSingular}}Response, error) {
    id, err := strconv.ParseInt(req.GetId(), 10, 64)
    if err != nil {
        log.Error(err)
        return nil, err
    }

	err := {{.SmallResourceNameSingular}}Service.Delete{{.CapsResourceNameSingular}}(id)

	if err != nil {
		return nil, err
	}

	return &pb.Delete{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Deleted Successfully!",
	}, nil
}