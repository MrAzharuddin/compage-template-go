package controllers

import (
	"context"

	pb "github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/gen/api/v1"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/grpc/server/services"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/grpc/server/models"
)

type {{.CapsResourceNameSingular}}Server struct {
	{{.SmallResourceNameSingular}}Service *services.{{.CapsResourceNameSingular}}Service
	pb.Unimplemented{{.CapsResourceNameSingular}}ServiceServer
}


func New{{.CapsResourceNameSingular}}Server() (*{{.CapsResourceNameSingular}}Server, error) {
	{{.SmallResourceNameSingular}}Service, err := services.New{{.CapsResourceNameSingular}}Service()
	if err != nil {
		return nil, err
	}
	return &{{.CapsResourceNameSingular}}Server{
		{{.SmallResourceNameSingular}}Service: {{.SmallResourceNameSingular}}Service,
	}, nil
}

func (*{{.CapsResourceNameSingular}}Server) Ping(_ context.Context, _ *pb.{{.CapsResourceNameSingular}}Request) (*pb.{{.CapsResourceNameSingular}}Response, error) {
	return &pb.{{.CapsResourceNameSingular}}Response{
		Message: "Server is healthy and working!",
	}, nil
}

func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Create{{.CapsResourceNameSingular}}(_ context.Context, req *pb.Create{{.CapsResourceNameSingular}}Request) (*pb.Create{{.CapsResourceNameSingular}}Response, error) {
	{{.SmallResourceNameSingular}} := models.{{.CapsResourceNameSingular}}{
        {{range $k, $v := .Fields}}
            {{if eq $k "Id"}}
            {{else}}
                {{$k}}: req.{{$.CapsResourceNameSingular}}.Get{{$k}}(),
            {{end}}
        {{end}}
	}

	if err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Create{{.CapsResourceNameSingular}}({{.SmallResourceNameSingular}}); err != nil {
		return nil, err
	}

	return &pb.Create{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Created Successfully!",
	}, nil
}


func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Get{{.CapsResourceNameSingular}}(_ context.Context, req *pb.Get{{.CapsResourceNameSingular}}Request) (*pb.Get{{.CapsResourceNameSingular}}Response, error) {
    id := req.GetId()
	retrieved{{.CapsResourceNameSingular}}, err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Get{{.CapsResourceNameSingular}}(id)

	if err != nil {
		return nil, err
	}

	{{.SmallResourceNameSingular}}Response := &pb.{{.CapsResourceNameSingular}}{
		Id: id,
        {{range $k, $v := .Fields}}
            {{if eq $k "Id"}}
            {{else}}
                {{$k}}:  retrieved{{$.CapsResourceNameSingular}}.{{$k}},
            {{end}}
        {{end}}
	}

	return &pb.Get{{.CapsResourceNameSingular}}Response{
		{{.CapsResourceNameSingular}}: {{.SmallResourceNameSingular}}Response,
	}, nil
}

func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) List{{.CapsResourceNamePlural}}(_ context.Context, _ *pb.List{{.CapsResourceNamePlural}}Request) (*pb.List{{.CapsResourceNamePlural}}Response, error) {
	{{.SmallResourceNamePlural}}, err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.List{{.CapsResourceNamePlural}}()

	if err != nil {
		return nil, err
	}

	var {{.SmallResourceNameSingular}}List []*pb.{{.CapsResourceNameSingular}}
	for _, retrieved{{.CapsResourceNameSingular}} := range {{.SmallResourceNamePlural}} {
		{{.SmallResourceNameSingular}}Response := &pb.{{.CapsResourceNameSingular}}{
			Id: retrieved{{.CapsResourceNameSingular}}.Id,
            {{range $k, $v := .Fields}}
                {{if eq $k "Id"}}
                {{else}}
                    {{$k}}:  retrieved{{$.CapsResourceNameSingular}}.{{$k}},
                {{end}}
            {{end}}
		}
		{{.SmallResourceNameSingular}}List = append({{.SmallResourceNameSingular}}List, {{.SmallResourceNameSingular}}Response)
	}

	return &pb.List{{.CapsResourceNamePlural}}Response{
		{{.CapsResourceNameSingular}}: {{.SmallResourceNameSingular}}List,
	}, nil
}

func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Update{{.CapsResourceNameSingular}}(_ context.Context, req *pb.Update{{.CapsResourceNameSingular}}Request) (*pb.Update{{.CapsResourceNameSingular}}Response, error) {
	id := req.GetId()

	{{.SmallResourceNameSingular}}Request := models.{{.CapsResourceNameSingular}}{
		Id: id,
        {{range $k, $v := .Fields}}
            {{if eq $k "Id"}}
            {{else}}
                {{$k}}:  req.{{$.CapsResourceNameSingular}}.Get{{$k}}(),
            {{end}}
        {{end}}
	}
	err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Update{{.CapsResourceNameSingular}}(id, {{.SmallResourceNameSingular}}Request)

	if err != nil {
		return nil, err
	}

	return &pb.Update{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Updated Successfully!",
	}, nil
}

func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Delete{{.CapsResourceNameSingular}}(_ context.Context, req *pb.Delete{{.CapsResourceNameSingular}}Request) (*pb.Delete{{.CapsResourceNameSingular}}Response, error) {
	id := req.GetId()
	err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Delete{{.CapsResourceNameSingular}}(id)

	if err != nil {
		return nil, err
	}

	return &pb.Delete{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Deleted Successfully!",
	}, nil
}