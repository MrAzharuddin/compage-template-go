package daos

import (
	"context"
	"errors"
    "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/grpc/server/daos/clients/nosqls"
    "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/grpc/server/models"
	log "github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type {{.CapsResourceNameSingular}}Dao struct {
	mongoDBClient *nosqls.MongoDBClient
	collection    *mongo.Collection
}

func New{{.CapsResourceNameSingular}}Dao() (*{{.CapsResourceNameSingular}}Dao, error) {
	mongoDBClient, err := nosqls.InitMongoDB()
	if err != nil {
		log.Debugf("init mongoDB failed: %v", err)
		return nil, err
	}
	return &{{.CapsResourceNameSingular}}Dao{
		mongoDBClient: mongoDBClient,
		collection:    mongoDBClient.Database.Collection("{{.SmallResourceNamePlural}}"),
	}, nil
}

{{ if .IsGRPCCreateAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Create{{.CapsResourceNameSingular}}({{.SmallResourceNameSingular}} *models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
	// create a document for given {{.SmallResourceNameSingular}}
	insertOneResult, err := {{.SmallResourceNameSingular}}Dao.collection.InsertOne(context.TODO(), {{.SmallResourceNameSingular}})
	if err != nil {
		log.Debugf("insert failed: %v", err)
		return nil, err
	}
	{{.SmallResourceNameSingular}}.ID = insertOneResult.InsertedID.(primitive.ObjectID).Hex()

	log.Debugf("{{.SmallResourceNameSingular}} created")
	return {{.SmallResourceNameSingular}}, nil
}
{{ end }}

{{ if .IsGRPCListAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) List{{.CapsResourceNamePlural}}() ([]*models.{{.CapsResourceNameSingular}}, error) {
	filters := bson.D{}
	{{.SmallResourceNamePlural}}, err := {{.SmallResourceNameSingular}}Dao.collection.Find(context.TODO(), filters)
	if err != nil {
		return nil, err
	}
	var {{.SmallResourceNameSingular}}List []*models.{{.CapsResourceNameSingular}}
	for {{.SmallResourceNamePlural}}.Next(context.TODO()) {
		var {{.SmallResourceNameSingular}} *models.{{.CapsResourceNameSingular}}
		if err = {{.SmallResourceNamePlural}}.Decode(&{{.SmallResourceNameSingular}}); err != nil {
			log.Debugf("decode {{.SmallResourceNameSingular}} failed: %v", err)
			return nil, err
		}
		{{.SmallResourceNameSingular}}List = append({{.SmallResourceNameSingular}}List, {{.SmallResourceNameSingular}})
	}
	if {{.SmallResourceNameSingular}}List == nil {
		return []*models.{{.CapsResourceNameSingular}}{}, nil
	}

	log.Debugf("{{.SmallResourceNameSingular}} listed")
	return {{.SmallResourceNameSingular}}List, nil
}
{{ end }}

{{ if .IsGRPCGetAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Get{{.CapsResourceNameSingular}}(id string) (*models.{{.CapsResourceNameSingular}}, error) {
	var {{.SmallResourceNameSingular}} *models.{{.CapsResourceNameSingular}}
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return &models.{{.CapsResourceNameSingular}}{}, nosqls.ErrInvalidObjectID
	}
	filter := bson.D{
		{Key: "_id", Value: objectID},
		}
	if err = {{.SmallResourceNameSingular}}Dao.collection.FindOne(context.TODO(), filter).Decode(&{{.SmallResourceNameSingular}}); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			// This error means your query did not match any documents.
			return &models.{{.CapsResourceNameSingular}}{}, nosqls.ErrNotExists
		}
		log.Debugf("decode {{.SmallResourceNameSingular}} failed: %v", err)
		return nil, err
	}

	log.Debugf("{{.SmallResourceNameSingular}} retrieved")
	return {{.SmallResourceNameSingular}}, nil
}
{{ end }}

{{ if .IsGRPCPutAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Update{{.CapsResourceNameSingular}}(id string, {{.SmallResourceNameSingular}} *models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
	if id != {{.SmallResourceNameSingular}}.ID {
		log.Debugf("id(%s) and payload(%s) don't match", id, {{.SmallResourceNameSingular}}.ID)
		return nil, errors.New("id and payload don't match")
	}

	existing{{.CapsResourceNameSingular}}, err := {{.SmallResourceNameSingular}}Dao.Get{{.CapsResourceNameSingular}}(id)
	if err != nil {
		log.Debugf("get {{.SmallResourceNameSingular}} failed: %v", err)
		return nil, err
	}

	// no {{.SmallResourceNameSingular}} retrieved means no {{.SmallResourceNameSingular}} exists to update
	if existing{{.CapsResourceNameSingular}} == nil || existing{{.CapsResourceNameSingular}}.ID == "" {
		return nil, nosqls.ErrNotExists
	}

	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, nosqls.ErrInvalidObjectID
	}
	filter := bson.D{
		{Key: "_id", Value: objectID},
		}
	{{.SmallResourceNameSingular}}.ID = ""
	update := bson.M{
		"$set": {{.SmallResourceNameSingular}},
	}

	updateResult, err := {{.SmallResourceNameSingular}}Dao.collection.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Debugf("update {{.SmallResourceNameSingular}} failed: %v", err)
		return nil, err
	}
	if updateResult.ModifiedCount == 0 {
		return nil, nosqls.ErrUpdateFailed
	}

	log.Debugf("{{.SmallResourceNameSingular}} updated")
	return {{.SmallResourceNameSingular}},nil
}
{{ end }}

{{ if .IsGRPCDeleteAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Delete{{.CapsResourceNameSingular}}(id string) error {
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nosqls.ErrInvalidObjectID
	}
	filter := bson.D{
		{Key: "_id", Value: objectID},
	}
	deleteResult, err := {{.SmallResourceNameSingular}}Dao.collection.DeleteOne(context.TODO(), filter)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			// This error means your query did not match any documents.
			return nosqls.ErrNotExists
		}
		log.Debugf("delete {{.SmallResourceNameSingular}} failed: %v", err)
		return nosqls.ErrDeleteFailed
	}
	if deleteResult.DeletedCount == 0 {
		return nosqls.ErrNotExists
	}

	log.Debugf("{{.SmallResourceNameSingular}} deleted")
	return nil
}
{{ end }}