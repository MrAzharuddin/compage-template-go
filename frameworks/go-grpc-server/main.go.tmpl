package main

import (
	{{if .IsGrpcServer }}
	"fmt"
	"log"
	"net"
	"os"

	pb "github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/gen/api/v1"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/grpc/server/controllers"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
	{{else}}

	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/grpc/client"

	{{end}}
)

{{if .IsGrpcServer }}
var (
	host = "localhost"
	port = "{{.GrpcServerPort}}"
)
{{end}}

func main() {
	{{if .IsGrpcServer }}
	// Set up the TCP listener
	addr := fmt.Sprintf("%s:%s", host, port)
	lis, err := net.Listen("tcp", addr)
	if err != nil {
		log.Println("Error starting TCP listener:", err)
		os.Exit(1)
	}

	log.Println("TCP listener started at port:", port)

	// Create a new gRPC server
	grpcServer := grpc.NewServer()

	// Create the {{.CapsResourceNameSingular}} server
	{{.SmallResourceNamePlural}}Server := controllers.New{{.CapsResourceNameSingular}}Server()

	// Register the {{.CapsResourceNameSingular}} server with the gRPC server
	pb.Register{{.CapsResourceNameSingular}}ServiceServer(grpcServer, {{.SmallResourceNamePlural}}Server)

	// Enable reflection for the gRPC server
	reflection.Register(grpcServer)

	// Start serving gRPC requests
	if err := grpcServer.Serve(lis); err != nil {
		log.Println("Error serving gRPC:", err)
		os.Exit(1)
	}
	{{end}}

	{{if .IsGrpcClient }}
    client.Execute()
    {{end}}	
}