package repository

import (
	"database/sql"
	"errors"
	"fmt"
	"github.com/go-sql-driver/mysql"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
	"os"
	"time"
)

type MySQLRepository struct {
	db *sql.DB
}

func NewMySQLRepository(db *sql.DB) *MySQLRepository {
	return &MySQLRepository{
		db: db,
	}
}

func (r *MySQLRepository) Migrate() error {
	query := `
	CREATE TABLE IF NOT EXISTS {{.ResourceNamePlural}}(
		ID int NOT NULL AUTO_INCREMENT,
		FullName varchar(255) NOT NULL UNIQUE,
	    Marks int,
	    PRIMARY KEY (ID)
	);
	`

	_, err := r.db.Exec(query)
	return err
}

func (r *MySQLRepository) Create(w models.{{.ResourceName}}) (*models.{{.ResourceName}}, error) {
	insertQuery := "INSERT INTO {{.ResourceNamePlural}}(FullName, marks) values(?,?)"
	res, err := r.db.Exec(insertQuery, w.FullName, w.Marks)
	if err != nil {
		var mysqlErr *mysql.MySQLError
		if errors.As(err, &mysqlErr) {
			if mysqlErr.Number == 1062 {
				return nil, ErrDuplicate
			}
		}
		return nil, err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}
	w.Id = id

	return &w, nil
}

func (r *MySQLRepository) All() ([]models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}}"
	rows, err := r.db.Query(selectQuery)
	if err != nil {
		return nil, err
	}
	defer func(rows *sql.Rows) {
		_ = rows.Close()
	}(rows)

	var all []models.{{.ResourceName}}
	for rows.Next() {
		var w models.{{.ResourceName}}
		if err := rows.Scan(&w.Id, &w.FullName, &w.Marks); err != nil {
			return nil, err
		}
		all = append(all, w)
	}
	return all, nil
}

func (r *MySQLRepository) GetByName(fullName string) (*models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}} WHERE FullName = ?"
	row := r.db.QueryRow(selectQuery, fullName)

	var w models.{{.ResourceName}}
	if err := row.Scan(&w.Id, &w.FullName, &w.Marks); err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrNotExists
		}
		return nil, err
	}
	return &w, nil
}

func (r *MySQLRepository) Update(id int64, updated models.{{.ResourceName}}) (*models.{{.ResourceName}}, error) {
	if id == 0 {
		return nil, errors.New("invalid updated ID")
	}
	updateQuery := "UPDATE {{.ResourceNamePlural}} SET fullName = ?, marks = ? WHERE Id = ?"
	res, err := r.db.Exec(updateQuery, updated.FullName, updated.Marks, id)
	if err != nil {
		return nil, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return nil, err
	}

	if rowsAffected == 0 {
		return nil, ErrUpdateFailed
	}

	return &updated, nil
}

func (r *MySQLRepository) Delete(id int64) error {
	deleteQuery := "DELETE FROM {{.ResourceNamePlural}} WHERE Id = ?"
	res, err := r.db.Exec(deleteQuery, id)
	if err != nil {
		return err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return ErrDeleteFailed
	}

	return err
}

func (r *MySQLRepository) Get(id int64) (*models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}} WHERE Id = ?"
	row := r.db.QueryRow(selectQuery, id)

	var s models.{{.ResourceName}}
	if err := row.Scan(&s.Id, &s.FullName, &s.Marks); err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrNotExists
		}
		return nil, err
	}
	return &s, nil
}

var (
	user     = os.Getenv("MYSQL_DB_USER")
	password = os.Getenv("MYSQL_DB_PASSWORD")
	host     = os.Getenv("MYSQL_DB_HOST")
	port     = os.Getenv("MYSQL_DB_PORT")
	database = os.Getenv("MYSQL_DB_DATABASE")
)

func InitMySQLDB() (*MySQLRepository, error) {
	dataSource := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", user, password, host, port, database)
	db, err := sql.Open("mysql", dataSource)
	if err != nil {
		panic(err)
	}
	db.SetConnMaxLifetime(time.Minute * 3)
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(10)

	mySQLRepository := NewMySQLRepository(db)

	if err = mySQLRepository.Migrate(); err != nil {
		return nil, err
	}

	return mySQLRepository, nil
}
