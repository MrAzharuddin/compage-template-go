package repository

import (
	"database/sql"
	"errors"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
	"github.com/mattn/go-sqlite3"
	"os"
)

const fileName = "sqlite.db"

type SQLiteRepository struct {
	db *sql.DB
}

func NewSQLiteRepository(db *sql.DB) *SQLiteRepository {
	return &SQLiteRepository{
		db: db,
	}
}

func (r *SQLiteRepository) Migrate() error {
	query := `
	CREATE TABLE IF NOT EXISTS {{.ResourceNamePlural}}(
		Id INTEGER PRIMARY KEY AUTOINCREMENT,
		FullName TEXT NOT NULL,
		Marks INTEGER
	)
	`
	_, err := r.db.Exec(query)
	return err
}

func (r *SQLiteRepository) Create({{.ResourceNameSingular}} models.{{.ResourceName}}) (*models.{{.ResourceName}}, error) {
	insertQuery := "INSERT INTO {{.ResourceNamePlural}}(FullName, Marks) values(?,?)"
	res, err := r.db.Exec(insertQuery, {{.ResourceNameSingular}}.FullName, {{.ResourceNameSingular}}.Marks)
	if err != nil {
		var sqliteErr sqlite3.Error
		if errors.As(err, &sqliteErr) {
			if errors.Is(sqliteErr.ExtendedCode, sqlite3.ErrConstraintUnique) {
				return nil, ErrDuplicate
			}
		}
		return nil, err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}
	{{.ResourceNameSingular}}.Id = id

	return &{{.ResourceNameSingular}}, nil
}

func (r *SQLiteRepository) All() ([]models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}}"
	rows, err := r.db.Query(selectQuery)
	if err != nil {
		return nil, err
	}
	defer func(rows *sql.Rows) {
		_ = rows.Close()
	}(rows)

	var all []models.{{.ResourceName}}
	for rows.Next() {
		var s models.{{.ResourceName}}
		if err := rows.Scan(&s.Id, &s.FullName, &s.Marks); err != nil {
			return nil, err
		}
		all = append(all, s)
	}
	if all == nil {
		all = []models.{{.ResourceName}}{}
	}
	return all, nil
}

func (r *SQLiteRepository) GetByName(fullName string) (*models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}} WHERE FullName = ?"
	row := r.db.QueryRow(selectQuery, fullName)

	var s models.{{.ResourceName}}
	if err := row.Scan(&s.Id, &s.FullName, &s.Marks); err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrNotExists
		}
		return nil, err
	}
	return &s, nil
}

func (r *SQLiteRepository) Get(id int64) (*models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}} WHERE Id = ?"
	row := r.db.QueryRow(selectQuery, id)

	var s models.{{.ResourceName}}
	if err := row.Scan(&s.Id, &s.FullName, &s.Marks); err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrNotExists
		}
		return nil, err
	}
	return &s, nil
}

func (r *SQLiteRepository) Update(id int64, updated models.{{.ResourceName}}) (*models.{{.ResourceName}}, error) {
	if id == 0 {
		return nil, errors.New("invalid updated ID")
	}
	updateQuery := "UPDATE {{.ResourceNamePlural}} SET FullName = ?, Marks = ? WHERE Id = ?"
	res, err := r.db.Exec(updateQuery, updated.FullName, updated.Marks, id)
	if err != nil {
		return nil, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return nil, err
	}

	if rowsAffected == 0 {
		return nil, ErrUpdateFailed
	}

	return &updated, nil
}

func (r *SQLiteRepository) Delete(id int64) error {
	deleteQuery := "DELETE FROM {{.ResourceNamePlural}} WHERE Id = ?"
	res, err := r.db.Exec(deleteQuery, id)
	if err != nil {
		return err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return ErrDeleteFailed
	}

	return err
}

func InitSqliteDB() (*SQLiteRepository, error) {
	if _, err := os.Stat(fileName); err == nil {
		err1 := os.Remove(fileName)
		if err1 != nil {
			return nil, err1
		}
	}

	db, err := sql.Open("sqlite3", fileName)
	if err != nil {
		return nil, err
	}

	sqLiteRepository := NewSQLiteRepository(db)

	if err = sqLiteRepository.Migrate(); err != nil {
		return nil, err
	}

	return sqLiteRepository, nil
}
