package {{.SmallSnakeCaseResourceNameSingular}}_client

import (
	"database/sql"
	"errors"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/daos/clients/sqls"

	"github.com/mattn/go-sqlite3"
)

func Migrate(r *sqls.SQLiteClient) error {
	query := `
	CREATE TABLE IF NOT EXISTS {{.SmallResourceNamePlural}}(
		Id INTEGER PRIMARY KEY AUTOINCREMENT,
        {{range $k, $v := .CreateQueryColumns}}
        {{$k}} {{$v}} NOT NULL,
        {{end}}
        CONSTRAINT id_unique_key UNIQUE (Id)
	)
	`
	_, err := r.DB.Exec(query)
	return err
}

func Create(r *sqls.SQLiteClient, m models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
	insertQuery := "INSERT INTO {{.SmallResourceNamePlural}}({{.InsertQueryColumns}})values({{.InsertQueryParams}})"
	res, err := r.DB.Exec(insertQuery, {{.InsertQueryExecColumns}})
	if err != nil {
		var sqliteErr sqlite3.Error
		if errors.As(err, &sqliteErr) {
			if errors.Is(sqliteErr.ExtendedCode, sqlite3.ErrConstraintUnique) {
				return nil, sqls.ErrDuplicate
			}
		}
		return nil, err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}
	m.Id = id

	return &m, nil
}

func All(r *sqls.SQLiteClient) ([]models.{{.CapsResourceNameSingular}}, error) {
	selectQuery := "SELECT * FROM {{.SmallResourceNamePlural}}"
	rows, err := r.DB.Query(selectQuery)
	if err != nil {
		return nil, err
	}
	defer func(rows *sql.Rows) {
		_ = rows.Close()
	}(rows)

	var all []models.{{.CapsResourceNameSingular}}
	for rows.Next() {
		var m models.{{.CapsResourceNameSingular}}
    	if err := rows.Scan(&m.Id, {{.GetQueryExecColumns}}); err != nil {
			return nil, err
		}
		all = append(all, m)
	}
	if all == nil {
		all = []models.{{.CapsResourceNameSingular}}{}
	}
	return all, nil
}

func Get(r *sqls.SQLiteClient, id int64) (*models.{{.CapsResourceNameSingular}}, error) {
	selectQuery := "SELECT * FROM {{.SmallResourceNamePlural}} WHERE Id = ?"
	row := r.DB.QueryRow(selectQuery, id)

	var m models.{{.CapsResourceNameSingular}}
	if err := row.Scan(&m.Id, {{.GetQueryExecColumns}}); err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sqls.ErrNotExists
		}
		return nil, err
	}
	return &m, nil
}

func Update(r *sqls.SQLiteClient, id int64, m models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
	if id == 0 {
		return nil, errors.New("invalid updated ID")
	}
	updateQuery := "UPDATE {{.SmallResourceNamePlural}} SET {{.UpdateQueryColumnsAndParams}} WHERE Id = ?"
    res, err := r.DB.Exec(updateQuery, {{.UpdateQueryExecColumns}}, id)
	if err != nil {
		return nil, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return nil, err
	}

	if rowsAffected == 0 {
		return nil, sqls.ErrUpdateFailed
	}

	return &m, nil
}

func Delete(r *sqls.SQLiteClient, id int64) error {
	deleteQuery := "DELETE FROM {{.SmallResourceNamePlural}} WHERE Id = ?"
	res, err := r.DB.Exec(deleteQuery, id)
	if err != nil {
		return err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return sqls.ErrDeleteFailed
	}

	return err
}
