package sql_client

import (
	"database/sql"
	"errors"
	"fmt"
	"github.com/go-sql-driver/mysql"
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
	"os"
	"time"
)

var (
	ErrDuplicate    = errors.New("record already exists")
	ErrNotExists    = errors.New("row not exists")
	ErrUpdateFailed = errors.New("update failed")
	ErrDeleteFailed = errors.New("delete failed")
)

var (
	user     = os.Getenv("MYSQL_DB_USER")
	password = os.Getenv("MYSQL_DB_PASSWORD")
	host     = os.Getenv("MYSQL_DB_HOST")
	port     = os.Getenv("MYSQL_DB_PORT")
	database = os.Getenv("MYSQL_DB_DATABASE")
)

type MySQLRepository struct {
	db *sql.DB
}

func NewMySQLRepository(db *sql.DB) *MySQLRepository {
	return &MySQLRepository{
		db: db,
	}
}

func (r *MySQLRepository) Migrate() error {
	query := `
	CREATE TABLE IF NOT EXISTS {{.ResourceNamePlural}}(
		ID int NOT NULL AUTO_INCREMENT,
        {{range $k, $v := .CreateQueryColumns}}
        {{$k}} {{$v}} NOT NULL,
        {{end}}
	    PRIMARY KEY (ID)
	);
	`

	_, err := r.db.Exec(query)
	return err
}

func (r *MySQLRepository) Create(m models.{{.ResourceName}}) (*models.{{.ResourceName}}, error) {
	insertQuery := "INSERT INTO {{.ResourceNamePlural}}({{.InsertQueryColumns}}) values({{.InsertQueryParams}})"
	res, err := r.db.Exec(insertQuery, {{.InsertQueryExecColumns}})
	if err != nil {
		var mysqlErr *mysql.MySQLError
		if errors.As(err, &mysqlErr) {
			if mysqlErr.Number == 1062 {
				return nil, ErrDuplicate
			}
		}
		return nil, err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}
	m.Id = id

	return &m, nil
}

func (r *MySQLRepository) All() ([]models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}}"
	rows, err := r.db.Query(selectQuery)
	if err != nil {
		return nil, err
	}
	defer func(rows *sql.Rows) {
		_ = rows.Close()
	}(rows)

	var all []models.{{.ResourceName}}
	for rows.Next() {
		var m models.{{.ResourceName}}
		if err := rows.Scan(&m.Id, {{.GetQueryExecColumns}}); err != nil {
			return nil, err
		}
		all = append(all, m)
	}
	return all, nil
}

func (r *MySQLRepository) Update(id int64, m models.{{.ResourceName}}) (*models.{{.ResourceName}}, error) {
	if id == 0 {
		return nil, errors.New("invalid updated ID")
	}
	updateQuery := "UPDATE {{.ResourceNamePlural}} SET {{.UpdateQueryColumnsAndParams}} WHERE Id = ?"
	res, err := r.db.Exec(updateQuery, {{.UpdateQueryExecColumns}}, id)
	if err != nil {
		return nil, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return nil, err
	}

	if rowsAffected == 0 {
		return nil, ErrUpdateFailed
	}

	return &m, nil
}

func (r *MySQLRepository) Delete(id int64) error {
	deleteQuery := "DELETE FROM {{.ResourceNamePlural}} WHERE Id = ?"
	res, err := r.db.Exec(deleteQuery, id)
	if err != nil {
		return err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return ErrDeleteFailed
	}

	return err
}

func (r *MySQLRepository) Get(id int64) (*models.{{.ResourceName}}, error) {
	selectQuery := "SELECT * FROM {{.ResourceNamePlural}} WHERE Id = ?"
	row := r.db.QueryRow(selectQuery, id)

	var m models.{{.ResourceName}}
	if err := row.Scan(&m.Id, {{.GetQueryExecColumns}}); err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrNotExists
		}
		return nil, err
	}
	return &m, nil
}

func InitMySQLDB() (*MySQLRepository, error) {
	dataSource := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", user, password, host, port, database)
	db, err := sql.Open("mysql", dataSource)
	if err != nil {
		panic(err)
	}
	db.SetConnMaxLifetime(time.Minute * 3)
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(10)

	mySQLRepository := NewMySQLRepository(db)

	if err = mySQLRepository.Migrate(); err != nil {
		return nil, err
	}

	return mySQLRepository, nil
}
