package main

import (
	{{if .IsServer }}
    "context"
    "github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/server/controllers"
    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus/promhttp"
    "github.com/sinhashubham95/go-actuator"
    log "github.com/sirupsen/logrus"
    "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/exporters/otlp/otlptrace"
    "go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc"
    "go.opentelemetry.io/otel/sdk/resource"
    sdktrace "go.opentelemetry.io/otel/sdk/trace"
    "google.golang.org/grpc/credentials"
  	"os"
    {{else}}
    "fmt"
    "github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/rest/client"
    {{end}}
)

func main() {
  {{if .IsServer }}
	router := gin.Default()
	// add opentel
	cleanup := initTracer()
	defer cleanup(context.Background())
	router.Use(otelgin.Middleware(serviceName))
	// add actuator
	addActuator(router)
	// add prometheus
	addPrometheus(router)

    v1 := router.Group("/v1")
    {
        {{range $i, $v := .Resources}}
            v1.GET("/{{$v.ResourceNamePlural}}/:id", controllers.Get{{$v.ResourceName}})
            v1.POST("/{{$v.ResourceNamePlural}}", controllers.Create{{$v.ResourceName}})
            v1.PUT("/{{$v.ResourceNamePlural}}/:id", controllers.Update{{$v.ResourceName}})
            v1.DELETE("/{{$v.ResourceNamePlural}}/:id", controllers.Delete{{$v.ResourceName}})
            v1.GET("/{{$v.ResourceNamePlural}}", controllers.List{{$v.ResourceName}}s)
            v1.PATCH("/{{$v.ResourceNamePlural}}/:id", controllers.Patch{{$v.ResourceName}})
            v1.HEAD("/{{$v.ResourceNamePlural}}", controllers.Head{{$v.ResourceName}})
            v1.OPTIONS("/{{$v.ResourceNamePlural}}", controllers.Options{{$v.ResourceName}})
        {{end}}
    }

	// call external client here if the isClient value is true

	Port := ":{{.ServerPort}}"
	if err := router.Run(Port); err != nil {
		return
	}
   {{else}}
    b, err := client.Execute()
    if err!=nil {
        return
    }
    fmt.Println("Response received : ", string(b))
   {{end}}
}

{{if .IsServer }}

var (
	serviceName  = os.Getenv("SERVICE_NAME")
	collectorURL = os.Getenv("OTEL_EXPORTER_OTLP_ENDPOINT")
	insecure     = os.Getenv("INSECURE_MODE")
)

func prometheusHandler() gin.HandlerFunc {
	h := promhttp.Handler()

	return func(c *gin.Context) {
		h.ServeHTTP(c.Writer, c.Request)
	}
}

func addPrometheus(router *gin.Engine) {
	router.GET("/metrics", prometheusHandler())
}

func addActuator(router *gin.Engine) {
	actuatorHandler := actuator.GetActuatorHandler(&actuator.Config{Endpoints: []int{
		actuator.Env,
		actuator.Info,
		actuator.Metrics,
		actuator.Ping,
		//actuator.Shutdown,
		actuator.ThreadDump,
	},
		Env:     "dev",
		Name:    "{{.NodeName}}",
		Port:    {{.ServerPort}},
		Version: "0.0.1",
	})
	ginActuatorHandler := func(ctx *gin.Context) {
		actuatorHandler(ctx.Writer, ctx.Request)
	}
	router.GET("/actuator/*endpoint", ginActuatorHandler)
}

func initTracer() func(context.Context) error {
	secureOption := otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, ""))
	if len(insecure) > 0 {
		secureOption = otlptracegrpc.WithInsecure()
	}

	exporter, err := otlptrace.New(
		context.Background(),
		otlptracegrpc.NewClient(
			secureOption,
			otlptracegrpc.WithEndpoint(collectorURL),
		),
	)

	if err != nil {
		log.Fatal(err)
	}
	resources, err := resource.New(
		context.Background(),
		resource.WithAttributes(
			attribute.String("services.name", serviceName),
			attribute.String("library.language", "go"),
		),
	)
	if err != nil {
		log.Printf("could not set resources: %s", err)
	}

	otel.SetTracerProvider(
		sdktrace.NewTracerProvider(
			sdktrace.WithSampler(sdktrace.AlwaysSample()),
			sdktrace.WithBatcher(exporter),
			sdktrace.WithResource(resources),
		),
	)
	return exporter.Shutdown
}

func init() {
	// Log as JSON instead of the default ASCII formatter.
	//log.SetFormatter(&log.JSONFormatter{})
	log.SetFormatter(&log.TextFormatter{
		DisableColors: false,
		FullTimestamp: true,
	})
	// Output to stdout instead of the default stderr
	// Can be any io.Writer, see below for File example
	log.SetOutput(os.Stdout)
	// Only log the warning severity or above.
	log.SetLevel(log.InfoLevel)
}

{{end}}